# -*- coding: utf-8 -*-
"""
Created on Sun Nov 10 23:35:23 2019

@author: bhavv
"""

import pandas as pd

kick = pd.read_excel(r"C:\Users\bhavv\Downloads\Kickstarter.xlsx")

#summary stats
summary = kick.describe().transpose()   

#drop state other than successful and failure
kick = kick[kick.state != "canceled"]

kick = kick[kick.state != "live"]

kick = kick[kick.state != "suspended"]

#removing outliers
kick = kick[kick.project_id != 4801]

kick = kick[kick.project_id != 8696]

#removing duplicates
kick = kick[kick.project_id != 6932]
kick = kick[kick.project_id != 3672] 
kick = kick[kick.project_id != 20191]
kick = kick[kick.project_id != 1546]
kick = kick[kick.project_id != 8110]
kick = kick[kick.project_id != 851]
kick = kick[kick.project_id != 2416]
kick = kick[kick.project_id != 19146]
kick = kick[kick.project_id != 2714]
kick = kick[kick.project_id != 1528]
kick = kick[kick.project_id != 1789]
kick = kick[kick.project_id != 4708]


#dropping unnecessary column
kick = kick.drop(columns="launch_to_state_change_days")

kick_nw = kick.loc[:,kick.columns != "usd_pledged"]

kick_nw['goal_usd'] = kick_nw.goal*kick_nw.static_usd_rate

######Random Forest Regression Model

from sklearn.ensemble import RandomForestRegressor

#final predictor set
kick_nw_1 = kick_nw[['goal_usd','country','name_len','name_len_clean','blurb_len_clean','staff_pick','category','blurb_len','deadline_weekday','launched_at_weekday','deadline_month','deadline_day','deadline_yr','deadline_hr','launched_at_month','launched_at_day','launched_at_yr','launched_at_hr','create_to_launch_days','launch_to_deadline_days']]

#dropping nulls
kick_nw_1 = kick_nw_1.dropna()
kick = kick.dropna()

#dummifying categorical variables
kick_nw_df = pd.get_dummies(kick_nw_1,columns=['category','country','launched_at_weekday','deadline_weekday','deadline_month','launched_at_month','deadline_hr','launched_at_hr','deadline_day','launched_at_day'])

#split data into X and y
X = kick_nw_df
y = kick["usd_pledged"]  

#train and test dataset
from sklearn.model_selection import train_test_split
X_train,X_test, y_train,y_test = train_test_split(X,y,test_size=0.30,random_state=5)

# Run random forest model
rf = RandomForestRegressor(random_state=0,max_depth=39,max_features=23,n_estimators=1000,min_samples_leaf=7,n_jobs = -1)
model = rf.fit(X_train,y_train)

# Using the model to predict the results based on the test dataset
y_test_pred = rf.predict(X_test)

# Calculate the mean squared error of the prediction
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test,y_test_pred)
print(mse)
